name: deploy-to-swarm
on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'
jobs:
  Deploying:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: necrometal44/tictactoe-michel
      
      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.TAG_IMAGE }}
          labels: ${{ steps.meta.outputs.labels }}
  
      - name: update swarm service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          passphrase: ${{ secrets.KEY_PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: | 
            echo 'deploy service on swarm ...'
            service_image=${{ env.TAG_IMAGE }}
            service_name=${{ env.SERVICE_NAME }}
            replicas_number=3

            service_info=$(docker service ls --quiet --filter "name=$service_name")

            # Check if the variable has a value
            if [ -n "$service_info" ]; then
                docker service update --image $service_image $service_name
            else
                docker service create --name $service_name --replicas $replicas_number -p 80:80 $service_image
            fi
          